# bit全探索とは
# 「n 個の選択肢それぞれに Yes or No の二択があるが、その部分集合（選択できるパターン）の全てを網羅的にチェックしたい」
# Yes or No の二択が n 箇所あるので、パターン数は 2のn乗

# この選択肢の1つ1つを2進数のbit見立ててシフト演算でチェックを行うことからbit全探索

# みかん（100円）りんご（200円）ぶどう（300円）がそれぞれ1つずつ果物屋さんにありました。財布の中には300円ありますが、考え得るすべての買い物パターンを列挙しなさい。

money = 300
item = [["みかん", 100], ["りんご", 200], ["ぶどう", 300]]
n = len(item)

# 2進数表記した場合の下から数えてn桁目が1であるかどうかをチェックするには
# (i >> n) & 1
# iをn回右にシフトして論理積をとる

for i in range(2 ** n):
    bag = []
    total = 0
    for j in range(n):
        if((i >> j) & 1):
            bag.append(item[j][0])
            total += item[j][1]

    if total <= money:
        print(total, bag)
